#!/usr/bin/env bash
# webfinger

program=$0
program_directory="$(dirname "$0")"

if [ ! `which curl` ]
then
    echo Installing 'curl'
    sudo apt-get install curl -y
fi

if [ ! `which jq` ]
then
    echo Installing 'jq'
    sudo apt-get install jq -y
fi

set -euo pipefail

rel=
verbose=
validate=

rawurlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
        c=${string:$pos:1}
        case "$c" in
            [-_.~a-zA-Z0-9] ) o="${c}" ;;
            * )               printf -v o '%%%02x' "'$c"
        esac
        encoded+="${o}"
    done
    echo "${encoded}"    # You can either set a return variable (FASTER)
    REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

usage() {
>&2 cat << EOF
Usage: $0
    [ -r | --rel | --REL input ]
    [ -V | --validate ]
    [ -v | --verbose ]
    <user@domain>
EOF
exit 1
}

args=$(getopt -a -o Vhvr: --long help,verbose,validate,json-ld,rel:,REL: -- "$@")
if [[ $? -gt 0 ]]; then
  usage
fi

eval set -- ${args}
while :
do
  case $1 in
    -h | --help) usage; shift;;
    -v | --verbose) verbose=true; shift;;
    -V | --validate) validate=true; shift;;
    -r | --rel | --REL) rel=$2; shift 2;;
    # -- means the end of the arguments; drop this, and break out of the while loop
    --) shift; break ;;
    *) >&2 echo Unsupported option: $1
       usage ;;
  esac
done

if [[ $# -eq 0 ]]; then
  usage
fi

name=`echo $1 | sed 's/\(.*\)@\(.*\)$/\1/'`
domain=`echo $1 | sed 's/\(.*\)@\(.*\)$/\2/'`
server=$domain

if [ -n "${verbose}" ]
then
    echo name=${name}
    echo domain=${domain}
    echo server=${server}
    echo
fi

address=${name}@${domain}
resource=acct:$(rawurlencode $address)

accept="Accept: application/jrd+json"

base="https://${server}/.well-known/webfinger"

if [ ! -n "${rel}" ];
then
    uri="${base}?resource=${resource}"
else
    uri="${base}?resource=${resource}&rel=${rel}"
fi

command="curl -s --retry 2 --retry-max-time 30 -H \"${accept}\" ${uri}"

if [ -n "${verbose}" ]
then
    echo ${command}
    echo
fi

result=`${command}`

if [ -n "${verbose}" ]
then
    echo ${result}
    echo
fi

if [ "${result}" != "" ];
then
    echo $result | jq .

    if [ -n "${validate}" ]; then
        if [[ `which python` && `which pip` ]];
        then
            pip install check-jsonschema       
        elif [ ! `which ajv` ];
        then
            if [[ `which node` && `which npm` ]];
            then
                npm install -g ajv-cli ajv-formats
            fi
        fi
        if [ ! -e ${program_directory}/jrd.schema.json ]; then
            curl -s https://raw.githubusercontent.com/AaronNGray/webfinger.sh/main/jrd.schema.json >${program_directory}/jrd.schema.json
        fi
        echo -e "${result}" >/tmp/out.json
        echo

        if [ `which ajv` ]; then
            ajv --spec=draft2020 -c ajv-formats -s ${program_directory}/jrd.schema.json -d /tmp/out.json >null
            if [ $? ]; then
                echo "valid JRD"
            fi
        elif [ `which check-jsonschema` ]; then
            check-jsonschema --schemafile ${program_directory}/jrd.schema.json /tmp/out.json >null
            if [ $? ]; then
                echo "valid JRD"
            fi
        else
            echo "No validator options: you need to install python and pip, or Node.js"
        fi

        rm /tmp/out.json
    fi
fi
